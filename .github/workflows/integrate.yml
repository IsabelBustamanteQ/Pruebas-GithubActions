name: javascript-CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main, master]

permissions: write-all

jobs:
  ci_to_main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Obtener todo el historial de commits

      - name: Set up node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get list of commits
        id: get_commits
        run: |
          # Get the last commit SHA and the previous commit SHA
          LAST_COMMIT_SHA=$(git rev-parse HEAD)
          PREVIOUS_COMMIT_SHA=$(git rev-parse HEAD^)

          # Get the list of commits in the push
          commits=$(git log --pretty=format:'%H' $PREVIOUS_COMMIT_SHA..$LAST_COMMIT_SHA)

          echo "Commits to process: $commits"
          echo "::set-output name=commits::$commits"

      - name: Process each commit
        run: |
          # Iterate over each commit
          for commit in ${{ steps.get_commits.outputs.commits }}; do
            echo "Processing commit $commit"

            # Checkout each commit individually
            git checkout $commit

            # Install dependencies for each commit
            echo "Installing dependencies for commit $commit"
            npm ci
            
            # Run Unit Tests for each commit
            echo "Running unit tests for commit $commit"
            npm run test-once

            # Run Jest coverage report
            echo "Generating Jest coverage report for commit $commit"
            npx jest --coverage --coverageReporters=text-summary > coverage-summary.txt
            
            # Capture the coverage summary
            COVERAGE_OUTPUT=$(cat coverage-summary.txt)
            
            # Post coverage as comment for each commit
            echo "Posting coverage comment for commit $commit"
            if [[ -n "${{ github.event.pull_request.number }}" ]]; then
              gh pr comment ${{ github.event.pull_request.number }} --body "Coverage report for commit $commit: \n\n$COVERAGE_OUTPUT"
            else
              echo "No pull request number found. Skipping comment."
            fi

            # Optional: Add sticky pull request comment for this commit
            echo "Adding sticky comment for commit $commit"
            echo "${COVERAGE_OUTPUT}" | markdown >> sticky-comment.txt
            gh pr comment ${{ github.event.pull_request.number }} --body "$(cat sticky-comment.txt)"
          done
        shell: bash
